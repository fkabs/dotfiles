#!/bin/zsh

venv_get() {
    local venv_name=$1
    local venv_path="$VIRTUALENV_DIR/$venv_name"
    
    if [ -d "$venv_path" ]; then        
        if [ -z "$_NO_VERSION" ]; then
            source "$venv_path/bin/activate"
            echo "($(python --version 2>&1 | awk '{print $2}')) $venv_name"
            deactivate
        else
            echo "$venv_name"
        fi
    else
        return 1
    fi
}

venv_ls() {
    if [ -z "$(ls -A $VIRTUALENV_DIR 2>/dev/null)" ]; then
        _log "No virtual environments found in '$VIRTUALENV_DIR'"
        return 0
    fi

    _log "Available virtual environments:"
    for venv in "$VIRTUALENV_DIR"/*; do
        local prefix='-'
        if [[ "$venv" == "$VIRTUAL_ENV" ]]; then
            prefix='*'
        fi
        _log "\t$prefix $(venv_get $(basename "$venv"))"
    done
}

venv_mk() {
    if [ -d "$venv_path" ]; then
        _log "Virtual environment '$(venv_get $venv_name)' already exists"
        return 1
    else
        command -v python -m venv "$venv_path"
        _log "Virtual environment '$(venv_get $venv_name)' created in '$venv_path'"
    fi
}

venv_rm() {
    if [ -d "$venv_path" ]; then
        local current_env=$(basename "$VIRTUAL_ENV" 2>/dev/null)

        if [[ "$current_env" == "$venv_name" ]]; then
            deactivate
            _log "Virtual environment '$(venv_get $venv_name)' deactivated"
        fi

        _log "Virtual environment '$(venv_get $venv_name)' removed"
        rm -rf "$VIRTUALENV_DIR/$venv_name"
    else
        echo "Virtual environment '$venv_name' not found"
        return 1
    fi
}

venv_set() {
    if [ -d "$venv_path" ]; then
        echo "layout venv $venv_name" > .envrc
        direnv allow
    else
        echo "Virtual environment '$venv_name' not found"
        return 1
    fi
}


# Set verbose mode for "log" function if it is not set
if [ -z "$_VERBOSE" ]; then
    _VERBOSE=1
fi

# Check if virtual environment name was passed as an argument
if [ -n "$2" ]; then
    venv_name=$2
    venv_path="$VIRTUALENV_DIR/$venv_name"
fi

case $1 in
    get|mk|rm|set)
        if [ -z "$venv_name" ]; then
            echo "Usage: venv $1 <venv_name>\n"
            _NO_VERSION=1 venv_ls ; return 1
        else
            venv_$command ; return 0
        fi ;;
    ls) venv_ls ; return 0 ;;
    *) echo "Usage: venv {get|ls|mk|rm|set}" ; return 1 ;;
esac
