#!/bin/zsh

# Make a brew dump file
echo "\n# Brewfile"
brew bundle dump --force --file=$BACKUP_HOME/brew/Brewfile
echo "Dumped file to $BACKUP_HOME/brew/Brewfile"

# Exporting dock layout
echo "\n# Dock layout"
echo "Exporting dock layout to $BACKUP_HOME/dock/dock-layout.plist"
defaults export com.apple.dock $BACKUP_HOME/dock/dock-layout.plist

# Backing up python virtual environments
echo "\n# Python virtual environments"
local reactivate_venv=0
local active_venv=''

# Check if $VIRTUAL_ENV is not empty
if [ -n "$PYENV_VIRTUAL_ENV" ]; then
    reactivate_venv=1
    active_venv=$(basename "$PYENV_VIRTUAL_ENV")
    pyenv deactivate
fi

if [ -z "$(ls -A $PYENV_ROOT 2>/dev/null)" ]; then
    echo "No virtual environments found in '$PYENV_ROOT'"
else
    echo "Backing up virtual environments to $BACKUP_HOME/venvs:"
    
    # Loop through all pyenv virtual environments
    for venv in $(pyenv virtualenvs --bare); do
        # Check if the environment name starts with a number
        if [[ "$venv" =~ ^[0-9] ]]; then
            # Activate the environment
            pyenv activate "$venv"
            
            # Get the environment name and python version
            local venv_name=$(basename "$venv")
            local python_version=$(python --version 2>&1 | awk '{print $2}')

            # Save requirements to a file
            echo "# $venv_name ($python_version)" > "$BACKUP_HOME/venvs/$venv_name.txt"
            pip freeze >> "$BACKUP_HOME/venvs/$venv_name.txt"

            # Deactivate the environment
            pyenv deactivate
            
            # Print status
            echo "\t- $venv_name ($python_version)"
        fi
    done
    
    # Reactivate the virtual environment if it was active before
    if [ $reactivate_venv -eq 1 ]; then
        pyenv activate $active_venv
    fi
fi
