#!/usr/bin/env zsh

# Runs the backup script
backup() {
    $DOTFILES/scripts/backup.zsh
}

# Update asdf plugins, mas and brew apps and cleanup while keeping the dock layout
brewup() {
    echo "# Exporting dock layout to "$DOTFILES/dock/dock-layout.plist"
    defaults export com.apple.dock $DOTFILES/dock/dock-layout.plist
    echo "\n# Updating asdf plugins"
    asdf plugin update --all
    echo "\n# Updating mas apps"
    mas upgrade
    echo "\n# Updating brew apps"
    brew upgrade --greedy
    echo "\n# Cleaning up"
    brew autoremove
    brew cleanup -s
    brew doctor
    echo "\n# Dumping Brewfile"
    brew bundle dump --force --file=$DOTFILES/brew/Brewfile
    echo "Dumped file to $DOTFILES/brew/Brewfile"
    echo "\n# Importing saved dock layout from "$DOTFILES/dock/dock-layout.plist"
    defaults export com.apple.dock $DOTFILES/dock/dock-layout.plist
    killall Dock
    echo "Done"
}

# Uninstall a brew app (with zap) and cleanup
brewzap() {
    echo "# Uninstalling $@"
    brew uninstall --zap $@
    echo "\n# Cleaning up"
    brew autoremove
    brew cleanup -s
    brew doctor
    echo "\n# Dumping Brewfile"
    brew bundle dump --force --file=$DOTFILES/brew/Brewfile
    echo "Dumped file to $DOTFILES/brew/Brewfile"â€š
}

# Run pip with no virtualenv active
gpip() {
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

# Run command assuming no virtualenv is active
nopip() {
    PIP_REQUIRE_VIRTUALENV="" "$@"
}

# Open container volume using docker/nerdctl/podman in busybox shell
nerdctlvol_sh() {
    nerdctl run --rm -it -v $1:/data busybox sh
}

# Copy contents of container volume using docker/nerdctl/podman to vol_$RAND_DIR in current directory
nerdctlvol_cp() {
    RAND_DIR=$(cat /dev/urandom | base64 | tr -dc '0-9a-zA-Z' | head -c8)
    mkdir $(pwd)/vol_"$RAND_DIR"
    nerdctl run --rm -it -v $1:/data -v $(pwd)/vol_"$RAND_DIR":/mnt busybox sh -c "cp -r /data/* /mnt"
    echo ">> Copied contents to '$(pwd)/vol_$RAND_DIR'"
    echo "$(pwd)/vol_$RAND_DIR" | pbcopy
    cd "$(pwd)/vol_$RAND_DIR"
    unset RAND_DIR
}

# Create .envrc file in current directory with virtualenvwrapper layout for direnv and allow it
local_env() {
    if [ -n "$1" ]; then
        echo "layout virtualenvwrapper $1" > .envrc
        direnv allow
    else
        echo "direnv: No virtualenv passed"
    fi
}
